{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\amazon\\\\frontend\\\\src\\\\screens\\\\MapScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { LoadScript, GoogleMap, StandaloneSearchBox, Marker } from '@react-google-maps/api';\nimport LoadingBox from '../components/LoadingBox';\nimport Axios from 'axios';\nimport { USER_ADDRESS_MAP_CONFIRM } from \"../constants/userConstants\";\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst libs = ['places'];\nconst defaultlocation = {\n  lat: 45.516,\n  lng: -73.56\n};\nexport default function MapScreen() {\n  _s();\n\n  const [googleAPIkey, setGoogleApiKey] = useState('');\n  const [center, setCenter] = useState(defaultlocation);\n  const [location, setLocation] = useState(center);\n  const mapRef = useRef(null);\n  const placeRef = useRef(null);\n  const markerRef = useRef(null);\n  useEffect(() => {\n    const fetch = async () => {\n      const {\n        data\n      } = await Axios('/api/config/google');\n      setGoogleApiKey(data);\n      getUserCurrentLocation();\n    };\n\n    fetch();\n  }, []);\n\n  const onLoad = map => {\n    mapRef.current = map;\n  };\n\n  const onMarkerLoad = marker => {\n    markerRef.current = marker;\n  };\n\n  const onLoadPlaces = place => {\n    placeRef.current = place;\n  };\n\n  const onIdle = () => {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n      lng: mapRef.current.center.lng()\n    });\n  };\n\n  const onPlacesChanged = () => {\n    const place = placeRef.current.getPlaces()[0].geometry.location;\n    setCenter({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n    setLocation({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n  };\n\n  const dispatch = useDispatch();\n\n  const onConfirm = () => {\n    const places = placeRef.current.getPlaces();\n\n    if (places && places.length === 1) {\n      //dispatch select action\n      dispatch({\n        type: 'USER_ADDRESS_MAP_CONFIRM',\n        payload: {\n          lat: location.lat,\n          lng: location.lng,\n          address: places[0].formatted_address,\n          name: places[0].name,\n          vicinity: places[0].vicinity,\n          googleAddressId: places[0].id\n        }\n      });\n      alert('location selected successfully.');\n    } else {\n      alert('Please enter your address');\n    }\n  };\n\n  const getUserCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      alert('Geolocation os not supported by this browser');\n    } else {\n      navigator.geolocation.getCurrentPosition(position => {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.latitude\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.latitude\n        });\n      });\n    }\n  };\n\n  return googleAPIkey ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"full-container\",\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      libraries: libs,\n      googleMapApiKey: googleAPIkey,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        id: \"sample-map\",\n        mapContainerStyle: {\n          height: '100%',\n          width: '100%'\n        },\n        center: center,\n        zoom: 15,\n        onLoad: onLoad,\n        onIdle: onIdle,\n        children: [/*#__PURE__*/_jsxDEV(StandaloneSearchBox, {\n          onLoad: onLoad,\n          onPlacesChanged: onPlacesChanged,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter your address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"primary\",\n              onClick: onConfirm,\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: location,\n          onLoad: onMarkerLoad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 27\n  }, this) : /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 8\n  }, this);\n}\n\n_s(MapScreen, \"7Ti6eEDDdkwjDrZl2J5KV0+dr+Q=\", false, function () {\n  return [useDispatch];\n});\n\n_c = MapScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapScreen\");","map":{"version":3,"sources":["C:/Users/DELL/Desktop/amazon/frontend/src/screens/MapScreen.js"],"names":["React","useEffect","useRef","useState","LoadScript","GoogleMap","StandaloneSearchBox","Marker","LoadingBox","Axios","USER_ADDRESS_MAP_CONFIRM","useDispatch","libs","defaultlocation","lat","lng","MapScreen","googleAPIkey","setGoogleApiKey","center","setCenter","location","setLocation","mapRef","placeRef","markerRef","fetch","data","getUserCurrentLocation","onLoad","map","current","onMarkerLoad","marker","onLoadPlaces","place","onIdle","onPlacesChanged","getPlaces","geometry","dispatch","onConfirm","places","length","type","payload","address","formatted_address","name","vicinity","googleAddressId","id","alert","navigator","geolocation","getCurrentPosition","position","coords","latitude","height","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { LoadScript, GoogleMap, StandaloneSearchBox, Marker } from '@react-google-maps/api';\r\nimport LoadingBox from '../components/LoadingBox';\r\nimport Axios from 'axios';\r\nimport { USER_ADDRESS_MAP_CONFIRM } from \"../constants/userConstants\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst libs =['places'];\r\nconst defaultlocation = { lat: 45.516, lng: -73.56 };\r\n\r\nexport default function MapScreen() {\r\n    const [googleAPIkey, setGoogleApiKey] = useState('');\r\n    const [center, setCenter] = useState(defaultlocation);\r\n    const [location, setLocation] = useState(center);\r\n\r\n    const mapRef = useRef(null);\r\n    const placeRef = useRef(null);\r\n    const markerRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            const {data} = await Axios('/api/config/google');\r\n            setGoogleApiKey(data);\r\n            getUserCurrentLocation();\r\n        };\r\n        fetch();\r\n    }, []);\r\n\r\n    const onLoad = (map) => {\r\n        mapRef.current = map;\r\n    };\r\n\r\n    const onMarkerLoad = (marker) => {\r\n        markerRef.current = marker;\r\n    };\r\n\r\n    const onLoadPlaces = (place) => {\r\n        placeRef.current = place;\r\n    };\r\n\r\n    const onIdle = () => {\r\n      setLocation({ lat: mapRef.current.center.lat(),\r\n        lng: mapRef.current.center.lng()});\r\n    };\r\n\r\n    const onPlacesChanged = () => {\r\n        const place = placeRef.current.getPlaces()[0].geometry.location;\r\n        setCenter({ lat: place.lat(), lng: place.lng() });\r\n        setLocation({ lat: place.lat(), lng: place.lng() });\r\n    };\r\n    const dispatch = useDispatch();\r\n    const onConfirm = () => {\r\n        const places = placeRef.current.getPlaces();\r\n        if(places && places.length === 1) {\r\n            //dispatch select action\r\n            dispatch({\r\n                type: 'USER_ADDRESS_MAP_CONFIRM',\r\n                payload: {\r\n                    lat: location.lat,\r\n                    lng: location.lng,\r\n                    address: places[0].formatted_address,\r\n                    name: places[0].name,\r\n                    vicinity: places[0].vicinity,\r\n                    googleAddressId: places[0].id,\r\n                },\r\n            });\r\n            alert('location selected successfully.');\r\n        } else {\r\n            alert('Please enter your address');\r\n        }\r\n    };\r\n\r\n    const getUserCurrentLocation = () => {\r\n        if(!navigator.geolocation) {\r\n            alert('Geolocation os not supported by this browser');\r\n        } else {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                setCenter({\r\n                    lat: position.coords.latitude,\r\n                    lng: position.coords.latitude,\r\n                });\r\n                setLocation({\r\n                    lat: position.coords.latitude,\r\n                    lng: position.coords.latitude,\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    return googleAPIkey ? <div className=\"full-container\">\r\n        <LoadScript libraries={libs} googleMapApiKey={googleAPIkey}>\r\n            <GoogleMap \r\n                id=\"sample-map\" \r\n                mapContainerStyle={{height:'100%', width: '100%'}} \r\n                center={center} \r\n                zoom={15} \r\n                onLoad={onLoad} \r\n                onIdle={onIdle}\r\n            >\r\n                <StandaloneSearchBox onLoad={onLoad} onPlacesChanged={onPlacesChanged}>\r\n                    <div>\r\n                        <input type=\"text\" placeholder=\"Enter your address\"></input>\r\n                        <button type=\"button\" className=\"primary\" onClick={onConfirm}>\r\n                            Confirm\r\n                        </button>\r\n                    </div>\r\n                </StandaloneSearchBox>\r\n                <Marker position={location} onLoad={onMarkerLoad}></Marker>\r\n            </GoogleMap>\r\n        </LoadScript>\r\n    </div>\r\n     : <LoadingBox></LoadingBox>\r\n}"]},"metadata":{},"sourceType":"module"}