{"ast":null,"code":"import Axios from 'axios';\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS, CART_SAVE_PAYMENT_METHOD, CART_ADD_ITEM_FAIL } from \"../constants/cartConstants\";\nexport const addToCart = (productId, qty) => async (dispatch, getState) => {\n  const {\n    data\n  } = await Axios.get(`/api/products/${productId}`);\n  const {\n    cart: {\n      cartItems\n    }\n  } = getState();\n\n  if (cartItems.length > 0 && data.seller._id !== cartItems[0].seller) {\n    dispatch({\n      type: CART_ADD_ITEM_FAIL,\n      payload: \"Can't Add to Cart. Buy from one seller at a time\"\n    });\n  } else {\n    dispatch({\n      type: CART_ADD_ITEM,\n      payload: {\n        name: data.name,\n        image: data.image,\n        price: data.price,\n        countInStock: data.countInStock,\n        product: data._id,\n        seller: data.seller,\n        qty\n      }\n    });\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n  }\n};\nexport const removeFromCart = productId => (dispatch, getState) => {\n  dispatch({\n    type: CART_REMOVE_ITEM,\n    payload: productId\n  });\n  localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n};\nexport const saveShippingAddress = data => dispatch => {\n  dispatch({\n    type: CART_SAVE_SHIPPING_ADDRESS,\n    payload: data\n  });\n  localStorage.setItem('shippingAddress', JSON.stringify(data));\n};\nexport const savePaymentMethod = data => dispatch => {\n  dispatch({\n    type: CART_SAVE_PAYMENT_METHOD,\n    payload: data\n  });\n};","map":{"version":3,"sources":["C:/Users/DELL/Desktop/amazon/frontend/src/actions/cartActions.js"],"names":["Axios","CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","CART_SAVE_PAYMENT_METHOD","CART_ADD_ITEM_FAIL","addToCart","productId","qty","dispatch","getState","data","get","cart","cartItems","length","seller","_id","type","payload","name","image","price","countInStock","product","localStorage","setItem","JSON","stringify","removeFromCart","saveShippingAddress","savePaymentMethod"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,gBAAxB,EAA0CC,0BAA1C,EAAsEC,wBAAtE,EAAgGC,kBAAhG,QAA0H,4BAA1H;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,SAAD,EAAYC,GAAZ,KAAoB,OAAMC,QAAN,EAAgBC,QAAhB,KAA6B;AACtE,QAAM;AAACC,IAAAA;AAAD,MAAS,MAAMX,KAAK,CAACY,GAAN,CAAW,iBAAgBL,SAAU,EAArC,CAArB;AACA,QAAM;AAAEM,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AAAR,MAAyBJ,QAAQ,EAAvC;;AACA,MAAGI,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBJ,IAAI,CAACK,MAAL,CAAYC,GAAZ,KAAoBH,SAAS,CAAC,CAAD,CAAT,CAAaE,MAA5D,EAAoE;AAChEP,IAAAA,QAAQ,CAAC;AAAES,MAAAA,IAAI,EAAEb,kBAAR;AACTc,MAAAA,OAAO,EAAE;AADA,KAAD,CAAR;AAGH,GAJD,MAKK;AACDV,IAAAA,QAAQ,CAAC;AACLS,MAAAA,IAAI,EAAEjB,aADD;AAELkB,MAAAA,OAAO,EAAC;AACJC,QAAAA,IAAI,EAAET,IAAI,CAACS,IADP;AAEJC,QAAAA,KAAK,EAAEV,IAAI,CAACU,KAFR;AAGJC,QAAAA,KAAK,EAAEX,IAAI,CAACW,KAHR;AAIJC,QAAAA,YAAY,EAAEZ,IAAI,CAACY,YAJf;AAKJC,QAAAA,OAAO,EAAEb,IAAI,CAACM,GALV;AAMJD,QAAAA,MAAM,EAAEL,IAAI,CAACK,MANT;AAOJR,QAAAA;AAPI;AAFH,KAAD,CAAR;AAYAiB,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAelB,QAAQ,GAAGG,IAAX,CAAgBC,SAA/B,CAAlC;AACH;AAGJ,CAzBM;AA2BP,OAAO,MAAMe,cAAc,GAAItB,SAAD,IAAe,CAACE,QAAD,EAAWC,QAAX,KAAwB;AACjED,EAAAA,QAAQ,CAAC;AAAES,IAAAA,IAAI,EAAEhB,gBAAR;AAA0BiB,IAAAA,OAAO,EAAEZ;AAAnC,GAAD,CAAR;AACAkB,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAelB,QAAQ,GAAGG,IAAX,CAAgBC,SAA/B,CAAlC;AACH,CAHM;AAKP,OAAO,MAAMgB,mBAAmB,GAAInB,IAAD,IAAWF,QAAD,IAAc;AACvDA,EAAAA,QAAQ,CAAC;AAAES,IAAAA,IAAI,EAAEf,0BAAR;AAAoCgB,IAAAA,OAAO,EAAER;AAA7C,GAAD,CAAR;AACAc,EAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAejB,IAAf,CAAxC;AACH,CAHM;AAKP,OAAO,MAAMoB,iBAAiB,GAAIpB,IAAD,IAAWF,QAAD,IAAc;AACrDA,EAAAA,QAAQ,CAAC;AAAES,IAAAA,IAAI,EAAEd,wBAAR;AAAkCe,IAAAA,OAAO,EAAER;AAA3C,GAAD,CAAR;AACH,CAFM","sourcesContent":["import Axios from 'axios';\r\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS, CART_SAVE_PAYMENT_METHOD, CART_ADD_ITEM_FAIL } from \"../constants/cartConstants\";\r\n\r\nexport const addToCart = (productId, qty) => async(dispatch, getState) => {\r\n    const {data} = await Axios.get(`/api/products/${productId}`);\r\n    const { cart: { cartItems }} = getState();\r\n    if(cartItems.length > 0 && data.seller._id !== cartItems[0].seller) {\r\n        dispatch({ type: CART_ADD_ITEM_FAIL, \r\n        payload: \"Can't Add to Cart. Buy from one seller at a time\",\r\n    });\r\n    }\r\n    else {\r\n        dispatch({\r\n            type: CART_ADD_ITEM,\r\n            payload:{\r\n                name: data.name,\r\n                image: data.image,\r\n                price: data.price,\r\n                countInStock: data.countInStock,\r\n                product: data._id,\r\n                seller: data.seller,\r\n                qty,\r\n            },\r\n        });\r\n        localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\r\n    }\r\n   \r\n   \r\n};\r\n\r\nexport const removeFromCart = (productId) => (dispatch, getState) => {\r\n    dispatch({ type: CART_REMOVE_ITEM, payload: productId});\r\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\r\n};\r\n\r\nexport const saveShippingAddress = (data) => (dispatch) => {\r\n    dispatch({ type: CART_SAVE_SHIPPING_ADDRESS, payload: data });\r\n    localStorage.setItem('shippingAddress', JSON.stringify(data));\r\n};\r\n\r\nexport const savePaymentMethod = (data) => (dispatch) => {\r\n    dispatch({ type: CART_SAVE_PAYMENT_METHOD, payload: data });\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}