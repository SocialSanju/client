{"ast":null,"code":"import Axios from 'axios';\nimport { WORK_LIST_REQUEST, WORK_LIST_SUCCESS, WORK_LIST_FAIL, ADD_WORK_FAIL, ADD_WORK_REQUEST, ADD_WORK_SUCCESS, WORK_DETAILS_FAIL, WORK_DETAILS_REQUEST, WORK_DETAILS_SUCCESS } from \"../constants/workConstants\";\nexport const worklist = _ref => {\n  let {} = _ref;\n  return async dispatch => {\n    dispatch({\n      type: WORK_LIST_REQUEST\n    });\n\n    try {\n      const {\n        data\n      } = await Axios.get(`/api/work/all`);\n      dispatch({\n        type: WORK_LIST_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: WORK_LIST_FAIL,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const addWork = (WorkType, Whom) => async dispatch => {\n  dispatch({\n    type: ADD_WORK_REQUEST,\n    payload: {\n      WorkType,\n      Whom\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post('/api/work/add', {\n      WorkType,\n      Whom\n    });\n    dispatch({\n      type: ADD_WORK_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('workAdd', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: ADD_WORK_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const detailsWork = workId => async dispatch => {\n  dispatch({\n    type: WORK_DETAILS_REQUEST,\n    payload: workId\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get(`/api/work/${workId}`);\n    dispatch({\n      type: WORK_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: WORK_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"names":["Axios","WORK_LIST_REQUEST","WORK_LIST_SUCCESS","WORK_LIST_FAIL","ADD_WORK_FAIL","ADD_WORK_REQUEST","ADD_WORK_SUCCESS","WORK_DETAILS_FAIL","WORK_DETAILS_REQUEST","WORK_DETAILS_SUCCESS","worklist","dispatch","type","data","get","payload","error","message","addWork","WorkType","Whom","post","localStorage","setItem","JSON","stringify","response","detailsWork","workId"],"sources":["C:/Users/Sehat Box/Desktop/Web Node/MIS/client/src/actions/workActions.js"],"sourcesContent":["import Axios from 'axios';\r\nimport {\r\n  WORK_LIST_REQUEST, WORK_LIST_SUCCESS, WORK_LIST_FAIL,\r\n  ADD_WORK_FAIL, ADD_WORK_REQUEST, ADD_WORK_SUCCESS,\r\n  WORK_DETAILS_FAIL,WORK_DETAILS_REQUEST,WORK_DETAILS_SUCCESS\r\n } from \"../constants/workConstants\";\r\n\r\n export const worklist = ({}) => async (dispatch) => {\r\n  dispatch({ type: WORK_LIST_REQUEST });\r\n  try {\r\n    const { data } = await Axios.get(\r\n      `/api/work/all`\r\n    );\r\n    dispatch({ type: WORK_LIST_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: WORK_LIST_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nexport const addWork = (WorkType, Whom) => async (dispatch) => {\r\n  dispatch({ type: ADD_WORK_REQUEST, payload: { WorkType, Whom } });\r\n  try {\r\n    const { data } = await Axios.post('/api/work/add', { WorkType, Whom });\r\n    dispatch({ type: ADD_WORK_SUCCESS, payload: data });\r\n    localStorage.setItem('workAdd', JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ADD_WORK_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\n\r\nexport const detailsWork = (workId) => async (dispatch) =>{\r\n  dispatch({\r\n      type: WORK_DETAILS_REQUEST, payload: workId });\r\n  try {\r\n      const { data } = await Axios.get(`/api/work/${workId}`);\r\n      dispatch({ type: WORK_DETAILS_SUCCESS, payload: data });\r\n  } catch (error) {\r\n      dispatch({ \r\n          type: WORK_DETAILS_FAIL, \r\n          payload: \r\n          error.response && error.response.data.message \r\n          ? error.response.data.message \r\n          : error.message,\r\n      });\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,iBADF,EACqBC,iBADrB,EACwCC,cADxC,EAEEC,aAFF,EAEiBC,gBAFjB,EAEmCC,gBAFnC,EAGEC,iBAHF,EAGoBC,oBAHpB,EAGyCC,oBAHzC,QAIQ,4BAJR;AAMC,OAAO,MAAMC,QAAQ,GAAG;EAAA,IAAC,EAAD;EAAA,OAAQ,MAAOC,QAAP,IAAoB;IACnDA,QAAQ,CAAC;MAAEC,IAAI,EAAEX;IAAR,CAAD,CAAR;;IACA,IAAI;MACF,MAAM;QAAEY;MAAF,IAAW,MAAMb,KAAK,CAACc,GAAN,CACpB,eADoB,CAAvB;MAGAH,QAAQ,CAAC;QAAEC,IAAI,EAAEV,iBAAR;QAA2Ba,OAAO,EAAEF;MAApC,CAAD,CAAR;IACD,CALD,CAKE,OAAOG,KAAP,EAAc;MACdL,QAAQ,CAAC;QAAEC,IAAI,EAAET,cAAR;QAAwBY,OAAO,EAAEC,KAAK,CAACC;MAAvC,CAAD,CAAR;IACD;EACF,CAVwB;AAAA,CAAjB;AAYR,OAAO,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,IAAX,KAAoB,MAAOT,QAAP,IAAoB;EAC7DA,QAAQ,CAAC;IAAEC,IAAI,EAAEP,gBAAR;IAA0BU,OAAO,EAAE;MAAEI,QAAF;MAAYC;IAAZ;EAAnC,CAAD,CAAR;;EACA,IAAI;IACF,MAAM;MAAEP;IAAF,IAAW,MAAMb,KAAK,CAACqB,IAAN,CAAW,eAAX,EAA4B;MAAEF,QAAF;MAAYC;IAAZ,CAA5B,CAAvB;IACAT,QAAQ,CAAC;MAAEC,IAAI,EAAEN,gBAAR;MAA0BS,OAAO,EAAEF;IAAnC,CAAD,CAAR;IACAS,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCC,IAAI,CAACC,SAAL,CAAeZ,IAAf,CAAhC;EACD,CAJD,CAIE,OAAOG,KAAP,EAAc;IACdL,QAAQ,CAAC;MACPC,IAAI,EAAER,aADC;MAEPW,OAAO,EACLC,KAAK,CAACU,QAAN,IAAkBV,KAAK,CAACU,QAAN,CAAeb,IAAf,CAAoBI,OAAtC,GACID,KAAK,CAACU,QAAN,CAAeb,IAAf,CAAoBI,OADxB,GAEID,KAAK,CAACC;IALL,CAAD,CAAR;EAOD;AACF,CAfM;AAkBP,OAAO,MAAMU,WAAW,GAAIC,MAAD,IAAY,MAAOjB,QAAP,IAAmB;EACxDA,QAAQ,CAAC;IACLC,IAAI,EAAEJ,oBADD;IACuBO,OAAO,EAAEa;EADhC,CAAD,CAAR;;EAEA,IAAI;IACA,MAAM;MAAEf;IAAF,IAAW,MAAMb,KAAK,CAACc,GAAN,CAAW,aAAYc,MAAO,EAA9B,CAAvB;IACAjB,QAAQ,CAAC;MAAEC,IAAI,EAAEH,oBAAR;MAA8BM,OAAO,EAAEF;IAAvC,CAAD,CAAR;EACH,CAHD,CAGE,OAAOG,KAAP,EAAc;IACZL,QAAQ,CAAC;MACLC,IAAI,EAAEL,iBADD;MAELQ,OAAO,EACPC,KAAK,CAACU,QAAN,IAAkBV,KAAK,CAACU,QAAN,CAAeb,IAAf,CAAoBI,OAAtC,GACED,KAAK,CAACU,QAAN,CAAeb,IAAf,CAAoBI,OADtB,GAEED,KAAK,CAACC;IALH,CAAD,CAAR;EAOH;AACF,CAfM"},"metadata":{},"sourceType":"module"}